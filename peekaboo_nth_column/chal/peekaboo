#!/usr/bin/env python3
import os
import sys
import threading
import subprocess
from ptrlib import *
from logging import getLogger, CRITICAL

RED='\033[0;31m'
GREEN='\033[0;32m'
NC='\033[0m' # No Color
BOLD=Color.BOLD

def exception_handler(exception_type, exception, traceback):
    return
sys.excepthook = exception_handler

FLAG = "h0w_do_you_k33p_finding_me_:O"
FORMAT = "omu{}"

def output_hook(s):
    s = s.decode()
    if s.strip() == FLAG:
        return s.strip() + f'\n{GREEN}[+]{NC} Remember to wrap the output with {GREEN}{FORMAT}{NC}\n'
    else:
        return f"{BOLD}{RED}[-]{NC} Some output was printed, but it was not the flag!\n"

def interactive(self, timeout=None):
    """Interactive mode
    """
    def thread_recv():
        while not flag.isSet():
            try:
                data = self.recv(size=4096, timeout=0.05)
                if data is not None:
                    sys.stdout.write(output_hook(data))
                    sys.stdout.flush()
            except TimeoutError:
                pass
            except EOFError:
                #logger.error("Receiver EOF")
                break
            except ConnectionAbortedError:
                #logger.error("Receiver EOF")
                break
            time.sleep(0.05)

    flag = threading.Event()
    th = threading.Thread(target=thread_recv)
    th.setDaemon(True)
    th.start()

    try:
        while not flag.isSet():
            data = input("{bold}{blue}[peekaboo]${end} ".format(
                bold=Color.BOLD, blue=Color.BLUE, end=Color.END
            ))
            if self._socket() is None:
                logger.error("Connection already closed")
                break
            if data is None:
                flag.set()
            else:
                try:
                    self.sendline(data)
                except ConnectionAbortedError:
                    logger.error("Sender EOF")
                    break
            time.sleep(0.1)
    except KeyboardInterrupt:
        flag.set()

    while th.is_alive():
        th.join(timeout = 0.1)
        time.sleep(0.1)

def banner():
    os.system("/usr/games/cowsay 'Welcome to [[Peekaboo: nth column]]'")
    print(f"""The {GREEN}Peekaboo{NC} challenges have a twist.
You will see NO output unless the output is exactly
the same as the flag we are expecting

[nth column]
For this iteration, the flag is in {GREEN}22nd column{NC}
of the file {GREEN}lots_of_text.txt{NC}

lots_of_text.txt looks something like this:
XXXXX{GREEN}F{NC}XXXX
XXXXX{GREEN}L{NC}XXXX
XXXXX{GREEN}A{NC}XXXX
XXXXX{GREEN}G{NC}XXXX

Here are the files we have in the directory
-------------------------------------------
{subprocess.check_output("ls").decode().replace(chr(10), '  ')}
-------------------------------------------
Try reading the flag from the {GREEN}lots_of_text.txt{NC} file!
""", flush=True)

if __name__ == "__main__":
    getLogger("ptrlib.pwn.proc").setLevel(CRITICAL)
    banner()
    p = Process("/bin/bash")
    try:
        interactive(p)
    except:
        pass
    finally:
        p.close()
        exit()